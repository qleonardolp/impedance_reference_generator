// Copyright (c) 2025, qleonardolp
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef IMPEDANCE_REFERENCE_GENERATOR__KINEMATIC_REFERENCE_HPP_
#define IMPEDANCE_REFERENCE_GENERATOR__KINEMATIC_REFERENCE_HPP_

#include <cmath>
#include <chrono>
#include <map>
#include <memory>
#include <string>
#include <vector>

#include <kinematic_pose_msgs/msg/kinematic_pose.hpp>
#include <lifecycle_msgs/msg/state.hpp>
#include <rclcpp/qos.hpp>
#include <rclcpp/rclcpp.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <rclcpp_lifecycle/state.hpp>

// auto-generated by generate_parameter_library
#include <impedance_reference_generator/kinematic_reference_parameters.hpp>

namespace kinematic_reference
{
enum SignalType
{
  kStep,
  kSmoothStep,
  kSineWave,
  kStepUpDown,
};

std::map<std::string, uint8_t> TypeMap = {
  {std::string("step"), SignalType::kStep},
  {std::string("smooth-step"), SignalType::kSmoothStep},
  {std::string("sinewave"), SignalType::kSineWave},
  {std::string("step-up-down"), SignalType::kStepUpDown}
};

const uint8_t kCartesianSpaceDim = 6;
const double kTimeOffset = 2.0;  // seconds

using KinematicPose = kinematic_pose_msgs::msg::KinematicPose;
using CallbackReturn = rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn;

/**
 * @brief Lifecycle Node with a simple publisher and configurable reference signal
 * through the node parameters
 */
class KinematicReference : public rclcpp_lifecycle::LifecycleNode
{
public:
  explicit KinematicReference(const std::string & node_name, bool intra_process_comms = false);

  CallbackReturn on_configure(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_cleanup(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_activate(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_deactivate(const rclcpp_lifecycle::State & previous_state) override;

  CallbackReturn on_shutdown(const rclcpp_lifecycle::State & previous_state) override;

  void publisher_callback();

private:
  std::shared_ptr<rclcpp::TimerBase> timer_;
  std::shared_ptr<rclcpp::Publisher<KinematicPose>> publisher_;
  KinematicPose message_;

  rclcpp::Time start_time_;
  double ellapsed_time_{0};

  int signal_type_;

  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
};

}  // namespace kinematic_reference

#endif  // IMPEDANCE_REFERENCE_GENERATOR__KINEMATIC_REFERENCE_HPP_
